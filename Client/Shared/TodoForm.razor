@using DotNetBlazorEFCSQLExperimental.Client.Services;
@using DotNetBlazorEFCSQLExperimental.Shared;

@inject ITodoService TodoService;

<EditForm Model="todo" OnValidSubmit="HandleSubmit">
    <div class="mb-3">
        <label class="form-label" for="title">Title</label>
        <input type="text" class="form-control" id="title" name="title" placeholder="Title" @bind-value="todo.Title" required />
    </div>

    <div class="mb-3">
        <label class="form-label" for="note">Note</label>
        <input type="text" class="form-control" id="note" name="note" placeholder="Note" @bind-value="todo.Note" />
    </div>

    <div class="input-container">
        <div class="priority-container mb-3">
            <label class="form-label" for="priority">Priority</label>
            <input class="priority-input form-control" type="number" id="priority" name="priority" min="1" max="10" @bind-value="todo.Priority" />
            <small id="priorityHelp" class="form-text text-muted">1 - 10</small>
        </div>

        <div class="duration-container mb-3">
            <label class="form-label" for="duration">Duration</label>

            <div class="d-flex">
                <input type="number" class="duration-input form-control" id="duration" name="duration" min="0" @bind-value="durationHrs" />
                <input type="number" class="form-control" id="duration" name="duration" min="0" max="59" @bind-value="durationMins" />
            </div>
            <small id="durationHelp" class="form-text text-muted">Hrs - Mins</small>
        </div>

        <div class="datetime-container mb-3">
            <label class="form-label" for="duedate">Due Date</label>

            <div class="d-flex">
                <input type="date" class="date-input form-control" @bind="datetemp" />
                <input type="time" class="time-input form-control" @bind="timetemp" />
            </div>
        </div>
    </div>
    <button type="submit" class="create-button btn btn-primary mb-3">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    Todo todo { get; set; } = new Todo();

    DateOnly datetemp = DateOnly.FromDateTime(DateTime.Now);
    TimeOnly timetemp = new TimeOnly(23, 59, 0);

    int durationHrs; 
    int durationMins;

    protected override void OnInitialized()
    {
        durationHrs = todo.Duration % 60;
        durationMins = todo.Duration / 60;
    }

    protected override async Task OnInitializedAsync()
    {
        todo = await TodoService.GetTodo(id);
    }
    
    void HandleSubmit()
    {
        todo.Duration = (durationHrs * 60) + durationMins;
        todo.Due = datetemp.ToDateTime(timetemp); 
        Console.WriteLine($"Submit Called! {todo}"); 

        //await TodoService.CreateTodo(todo); 
    }
}
